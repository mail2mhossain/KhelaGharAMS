using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using NakedObjects;
using NakedObjects.Services;
using NakedObjects.Security;
//using WebMatrix.WebData;
using System.Web.Security;
using KhelaGhar.AMS.Model.Domain;

namespace KhelaGhar.AMS.Model.Repository
{
    //[AuthorizeAction(Roles = "AMSAdmin")]
    [DisplayName("সেটআপ")]
    public class SetupRepository : AbstractFactoryAndRepository
    {
        #region Injected Services
        // This region should contain properties to hold references to any services required by the
        // object.  Use the 'injs' shortcut to add a new service.

        #endregion

        #region Activity
        [MemberOrder(Sequence = "20", Name = "কার্যক্রম")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নতুন কার্যক্রম")]
        public Activity CreateActivity()
        {
            return Container.NewTransientInstance<Activity>();
        }

        [MemberOrder(Sequence = "30", Name = "কার্যক্রম")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল কার্যক্রম")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        public IQueryable<Activity> AllActivity()
        {
            return Container.Instances<Activity>();
        }

        #endregion

        #region Division
        //[MemberOrder(Sequence = "120", Name = "বিভাগ")]
        ////[AuthorizeAction(Roles = "AMSAdmin")]
        //[DisplayName("নতুন বিভাগ")]
        //public Area CreateDivision([MaxLength(150), Required] string divisionName)
        //{
        //  AreaType type = (from t in Container.Instances<AreaType>()
        //                   where t.Parent == null
        //                   select t).First();

        //  Area area = Container.NewTransientInstance<Area>();

        //  area.Name = divisionName;
        //  area.AreaType = type;

        //  Container.Persist(ref area);

        //  return area;
        //}

        [MemberOrder(Sequence = "130", Name = "বিভাগ")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল বিভাগ")]
        [TableView(true, "Name", "AllActiveAsars", "AllNewAsars", "AllRevivedAsars", "AllInactiveAsars", "Members", "Kormies")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        public IList<Area> AllDivisions()
        {
          IList<Area> divisions = (from d in Container.Instances<Area>()
                                   where d.Parent == null
                                   select d).ToList();
          return divisions;
        }

        #endregion

        #region District
        [MemberOrder(Sequence = "220", Name = "জেলা")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নতুন জেলা")]
        public Area AddDistrict([MaxLength(150), Required] string districtName, [Required] Area division)
        {
          Area obj = CreateArea(districtName, (int)AllEnums.AreaType.District, division);
          return obj;
        }

        public string Validate0AddDistrict(string districtName)
        {
          if (IsAreaNameDuplicate(districtName, (int)AllEnums.AreaType.District))
          {
            return "Duplicate District Name";
          }

          return null;
        }

        public IList<Area> Choices1AddDistrict()
        {
          return this.AllDivisions();
        }

        [MemberOrder(Sequence = "230", Name = "জেলা")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল জেলা")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        [TableView(true, "Name", "AllActiveAsars", "AllNewAsars", "AllRevivedAsars", "AllInactiveAsars", "Members", "Kormies")]
        public IList<Area> AllDistrict()
        {
          IList<Area> districts = (from d in Container.Instances<Area>()
                                   where d.AreaType.AreaTypeId == (int)AllEnums.AreaType.District
                                   select d).ToList();
          return districts;
        }

        [MemberOrder(Sequence = "240", Name = "জেলা")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নাম দিয়ে খোঁজ")]
        [ExcludeFromFindMenu]
        public Area ByDistrictName(Area জেলা)
        {
          return জেলা;
        }

        [PageSize(10)]
        public IQueryable<Area> AutoComplete0ByDistrictName([MinLength(1)] string name)
        {
          IQueryable<Area> dists = Container.Instances<Area>().Where(w => w.Name.StartsWith(name) && w.AreaType.AreaTypeId == (int)AllEnums.AreaType.District);

          return dists;
        }

        #endregion

        #region SubDistrict
        [MemberOrder(Sequence = "320", Name = "উপজেলা")]
        [AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নতুন উপজেলা")]
        [ExcludeFromFindMenu]
        public Area AddSubDistrict([MaxLength(150), Required] string subdistrictName, [Required] Area district)
        {
          Area obj = CreateArea(subdistrictName, (int)AllEnums.AreaType.SubDistrict, district);
          return obj;
        }

        public IList<Area> Choices1AddSubDistrict()
        {
          return this.AllDistrict();
        }

        public string Validate0AddSubDistrict(string subdistrictName)
        {
          if (IsAreaNameDuplicate(subdistrictName, (int)AllEnums.AreaType.SubDistrict))
          {
            return "Duplicate Sub-District Name";
          }

          return null;
        }

        [MemberOrder(Sequence = "330", Name = "উপজেলা")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল উপজেলা")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        [TableView(true, "Name", "AllActiveAsars","AllNewAsars","AllRevivedAsars","AllInactiveAsars","Members","Kormies")]
        public IList<Area> AllSubDistricts()
        {
          IList<Area> subdistricts = (from d in Container.Instances<Area>()
                                      where d.AreaType.AreaTypeId == (int)AllEnums.AreaType.SubDistrict
                                      select d).ToList();
          return subdistricts;
        }

        [MemberOrder(Sequence = "340", Name = "উপজেলা")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নাম দিয়ে খোঁজ")]
        [ExcludeFromFindMenu]
        public Area BySubDistrictName(Area উপজেলা)
        {
          return উপজেলা;
        }

        [PageSize(10)]
        [Hidden]
        public IQueryable<Area> AutoComplete0BySubDistrictName([MinLength(1)] string name)
        {
          IQueryable<Area> subdists = Container.Instances<Area>().Where(w => w.Name.StartsWith(name) && w.AreaType.AreaTypeId == (int)AllEnums.AreaType.SubDistrict);

          return subdists;
        }

        #endregion

        #region AddMetropolitanCity (Action)

        [MemberOrder(Sequence = "350", Name = "মেট্রোপলিটন শহর")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নতুন মেট্রোপলিটন  শহর")]
        public Area AddMetropolitanCity([MaxLength(150), Required] string city, [Required] Area district)
        {
          Area obj = CreateArea(city, (int)AllEnums.AreaType.City, district);
          return obj;
        }

        public IList<Area> Choices1AddMetropolitanCity()
        {
          return this.AllDistrict();
        }

        public string Validate0AddMetropolitanCity(string city)
        {
          if (IsAreaNameDuplicate(city, (int)AllEnums.AreaType.City))
          {
            return "Duplicate City Name";
          }

          return null;
        }

        [MemberOrder(Sequence = "360", Name = "মেট্রোপলিটন শহর")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল শহর")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        [TableView(true, "Name", "AllActiveAsars", "AllNewAsars", "AllRevivedAsars", "AllInactiveAsars", "Members", "Kormies")]
        public IList<Area> AllCities()
        {
          IList<Area> subdistricts = (from d in Container.Instances<Area>()
                                      where d.AreaType.AreaTypeId == (int)AllEnums.AreaType.City
                                      select d).ToList();
          return subdistricts;
        }
        // Use 'hide', 'dis', 'val', 'actdef', 'actcho' shortcuts to add supporting methods here.
        #endregion

        private Area CreateArea(string name, int areaType, Area parent)
        {
          Area obj = Container.NewTransientInstance<Area>();
          obj.Name = name;
          obj.Parent = parent;
          obj.AreaType = (from t in Container.Instances<AreaType>()
                          where t.AreaTypeId == areaType
                          select t).FirstOrDefault();

          Container.Persist(ref obj);

          return obj;
        }

        private bool IsAreaNameDuplicate(string areaName, int areaType)
        {
          Area area = (from a in Container.Instances<Area>()
                       where a.Name == areaName
                       && a.AreaType.AreaTypeId == areaType
                       select a).FirstOrDefault();

          if (area == null)
          {
            return false;
          }
          return true;
        }

        #region Designation
        [MemberOrder(Sequence = "420", Name = "পদবী ")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("নতুন পদবী")]
        public Designation CreateDesignation()
        {
            return Container.NewTransientInstance<Designation>();
        }

        [MemberOrder(Sequence = "430", Name = "পদবী ")]
        //[AuthorizeAction(Roles = "AMSAdmin")]
        [DisplayName("সকল পদবী")]
        [Eagerly(EagerlyAttribute.Do.Rendering)]
        public IQueryable<Designation> AllDesignation([EnumDataType(typeof(AllEnums.DesignationType))] int comitteType)
        {
            return Container.Instances<Designation>().Where(w => w.DesignationType == comitteType || w.DesignationType ==(int) AllEnums.DesignationType.উভয়_কমিটি).OrderBy(O=>O.DesignationOrder);
        }

        #endregion

        #region Authorization PRIVATE METHODS

        [Hidden]
        private List<string> getFilteredMemebershipUsers()
        {
            if ((Roles.IsUserInRole(AllEnums.ADMIN)))
            {
                return this.getMembershipUsers(Roles.GetAllRoles());
            }
            //return this.getMembershipUsers(Roles.GetAllRoles().Where(x => (!x.Contains(AllEnums.ADMIN))).ToArray<string>());
            return this.getMembershipUsers(Roles.GetAllRoles().Where(x => (!x.Equals(AllEnums.ADMIN))).ToArray<string>());
        }

        [Hidden]
        private List<string> getMembershipUsers(string[] roleNames)
        {
            List<string> userNames = new List<string>();
            foreach (string roleName in roleNames)
            {
                string[] names = Roles.GetUsersInRole(roleName);
                userNames.AddRange(names);
            }
            userNames.Sort();
            return userNames;
        }

        //[Hidden]
        //public IList<string> getAllRoles()
        //{
        //    if ((Roles.IsUserInRole(AllEnums.FMS_ADMIN)) || (Roles.IsUserInRole(AllEnums.ADMIN)))
        //    {
        //        return Roles.GetAllRoles().ToList();
        //    }
        //    return Roles.GetAllRoles().Where(x => (!x.Contains(AllEnums.FMS_ADMIN)) && (!x.Contains(AllEnums.MANAGEMENT)) && (!x.Contains(AllEnums.ADMIN))).ToList();
        //}

        [Hidden]
        public IList<string> getAllRoles()
        {
            if (Roles.IsUserInRole(AllEnums.ADMIN))
            {
                return Roles.GetAllRoles().ToList();
            }
            return Roles.GetAllRoles().Where(x => (!x.Equals(AllEnums.ADMIN))).ToList();
        }

        #endregion

        
        public NoteType CreateNewNoteType()
        {
            NoteType obj = Container.NewTransientInstance<NoteType>();
            //set up any parameters
            //Container.Persist(ref obj);
            return obj;
        }
        

        // 'fact' shortcut to add a factory method, 
        // 'alli' for an all-instances method
        // 'find' for a method to find a single object by query
        // 'list' for a method to return a list of objects matching a query

    }
}
