using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using NakedObjects;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;

namespace KhelaGhar.AMS.Model.Domain
{
  [DisplayName("এলাকা")]
  public class Area
  {
    #region Injected Services
    // This region should contain properties to hold references to any services required by the
    // object.  Use the 'injs' shortcut to add a new service; 'injc' to add an injected Container
    public IDomainObjectContainer Container { set; protected get; }

    #endregion

    #region Life Cycle Methods
    // This region should contain any of the 'life cycle' convention methods (such as
    // Created(), Persisted() etc) called by the framework at specified stages in the lifecycle.


    #endregion

    public string Title()
    {
      var t = new TitleBuilder();
      if (this.AreaType != null)
      {
        string title = GetTitle(this);
        t.Append(title);
      }
      else
      {
        t.Append(this.Name);
      }
      return t.ToString();
    }

    #region Primitive Properties
    [Key, NakedObjectsIgnore]
    public virtual int AreaId { get; set; }

    [MemberOrder(20)]
    [DisplayName("নাম"), Required]
    [MaxLength(150)]
    public virtual string Name { get; set; }

    [MemberOrder(30)]
    [DisplayName("বর্ণনা")]
    [MaxLength(150), Optionally]
    public virtual string Description { get; set; }
    
    #endregion

    #region Get Only Properties

    [NakedObjectsIgnore, NotMapped]
    public bool HasChild
    {
      get
      {
        IList<Area> areas = GetChildren(this);
        if (areas.Count > 0)
          return true;

        return false;
      }
    }

    [MemberOrder(40), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("সক্রিয় আসরসমূহ")]
    [TableView(true, "Name", "DateOfEstablishment", "TotalMembers", "Kormies", "CommitteeType")]
    public IList<Asar> AllActiveAsars
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        return Container.Instances<Asar>().Where(d => allchildrenids.Contains(d.Area.AreaId) && (int)d.AsarStatus == (int)Asar.StatusOfAsar.সচল).OrderBy(o => o.Name).ToList();
      }
    }

    [MemberOrder(50), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("নতুন আসরসমূহ")]
    [TableView(true, "Name", "DateOfEstablishment", "TotalMembers", "Kormies", "CommitteeType")]
    public IList<Asar> AllNewAsars
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        return Container.Instances<Asar>().Where(d => allchildrenids.Contains(d.Area.AreaId) && (int)d.AsarStatus == (int)Asar.StatusOfAsar.নতুন).OrderBy(o => o.Name).ToList();
      }
    }

    [MemberOrder(60), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("পুনর্জাগরিত আসরসমূহ")]
    [TableView(true, "Name", "DateOfEstablishment", "TotalMembers", "Kormies", "CommitteeType")]
    public IList<Asar> AllRevivedAsars
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        return Container.Instances<Asar>().Where(d => allchildrenids.Contains(d.Area.AreaId) && (int)d.AsarStatus == (int)Asar.StatusOfAsar.পুনর্জাগরণ).OrderBy(o => o.Name).ToList();
      }
    }

    [MemberOrder(70), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("নিষ্ক্রিয় আসরসমূহ")]
    [TableView(true, "Name", "DateOfEstablishment", "TotalMembers", "Kormies", "CommitteeType")]
    public IList<Asar> AllInactiveAsars
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        return Container.Instances<Asar>().Where(d => allchildrenids.Contains(d.Area.AreaId) && (int)d.AsarStatus == (int)Asar.StatusOfAsar.নিষ্ক্রিয়).OrderBy(o => o.Name).ToList();
      }
    }

    [MemberOrder(22), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("সভ্য সংখ্যা")]
    public int Members
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        IList<Asar> asars = Container.Instances<Asar>().Where(d => allchildrenids.Contains(d.Area.AreaId)).ToList();

        if (asars.Count > 0)
          return asars.Sum(s => s.TotalMembers);

        return 0;
      }
    }

    [MemberOrder(23), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("কর্মী সংখ্যা")]
    public int Kormies
    {
      get
      {
        List<int> allchildrenids = GetChildrenIDs(this);

        return Container.Instances<Kormi>().Where(d => allchildrenids.Contains(d.Asar.Area.AreaId)).Count();
      }
    }

    #region SubDistricts
    [MemberOrder(110), NotMapped]
    //[Eagerly(EagerlyAttribute.Do.Rendering)]
    [DisplayName("উপজেলা/শহর")]
    [TableView(true)]
    public IList<Area> SubDistricts
    {
        get
        {
            return (from obj in Container.Instances<Area>()
                    where obj.Parent.AreaId == this.AreaId
                    select obj).ToList();
        }
    }

    public bool HideSubDistricts()
    {
        if (this.AreaType.AreaTypeId == (int)AllEnums.AreaType.District)
        {
            return false;
        }

        return true;
    }

    #endregion

    #endregion

    #region Navigation Properties
    [MemberOrder(40), NakedObjectsIgnore]
    [DisplayName("এলাকার ধরণ"), Required]
    public virtual AreaType AreaType { get; set; }

    [MemberOrder(100)]
    [DisplayName("এলাকা"), Optionally]
    public virtual Area Parent { get; set; }

    [PageSize(10)]
    public IQueryable<Area> AutoCompleteParent([MinLength(3)] string matching)
    {
      List<Area> areas = new List<Area>();
      if (this.Parent != null)
      {
        areas = (from a in Container.Instances<Area>()
                 where a.Name.StartsWith(matching)
                 && a.AreaType.AreaTypeId == this.Parent.AreaType.AreaTypeId
                 select a).ToList();
      }
      return areas.AsQueryable();
    }

    #endregion

    #region Actions
    #region NewDistrictCommittee (Action)

    [MemberOrder(Sequence = "3", Name = "কমিটি")]
    [DisplayName("জেলা কমিটি")]
    public Committee NewDistrictCommittee([EnumDataType(typeof(AllEnums.CommitteeType))]int CommitteeType, int TotalMembers, DateTime DateOfFormation )
    {
      Committee com = Container.NewTransientInstance<Committee>();
      DistrictCommittee dictcom = Container.NewTransientInstance<DistrictCommittee>();

      com.CommitteeType = CommitteeType;
      com.TotalMembers = TotalMembers;
      com.DateOfFormation = DateOfFormation;

      Container.Persist(ref com);

      dictcom.District = this;
      dictcom.Committee = com;

      Container.Persist(ref dictcom);

      return com;
    }

    public string Validate2NewDistrictCommittee(DateTime DateOfFormation)
    {
      var rb = new ReasonBuilder();

      Committee com = GetCurrentDistrictCommittee();

      if (com != null)
      {
        if (com.DateOfFormation <= DateOfFormation)
        {
          rb.AppendOnCondition(true, "Committee already exist");
        }
      }
      return rb.Reason;
    }

    public bool HideNewDistrictCommittee()
    {
      if (this.AreaType.AreaTypeId == (int) AllEnums.AreaType.District)
        return false;

      return true;
    }

    // Use 'hide', 'dis', 'val', 'actdef', 'actcho' shortcuts to add supporting methods here.
    #endregion

    #endregion

    #region Private Methods
    private string GetTitle(Area area)
    {
      if (area == null)
      {
        return "";
      }
      if (area.Parent == null)
      {
        return area.Name + " " + area.AreaType.Name;
      }
      else
      {
        return area.Name + " " + area.AreaType.Name + " - " + GetTitle(area.Parent);
      }
       
    }

    private List<int> GetChildrenIDs(Area area)
    {
      List<int> ids = new List<int>();

      if (area.HasChild)
      {
        ids.Add(area.AreaId);
        IList<Area> areas = GetChildren(area);

        foreach (Area a in areas)
        {
          ids = ids.Union(GetChildrenIDs(a)).ToList();
        }

        return ids;
      }
      else
      {
        ids.Add(area.AreaId);
        return ids;
      }
    }

    private List<int> GetChildIDs(Area area)
    {
      IList<Area> areas = GetChildren(area);

      List<int> ids = (from r in areas
                        select r.AreaId).ToList<int>();

      return ids;
    }

    private IList<Area> GetChildren(Area area)
    {
      IList<Area> areas = (from a in Container.Instances<Area>()
                           where a.Parent.AreaId == area.AreaId
                           select a).ToList();

      return areas;
    }

    private Committee GetCurrentDistrictCommittee()
    {
      Committee com = (from c in Container.Instances<DistrictCommittee>()
                       where c.District.AreaId == this.AreaId
                       select c.Committee).OrderByDescending(o => o.DateOfFormation).FirstOrDefault();

      return com;
    }
    #endregion

    //Add properties with 'propv', collections with 'coll', actions with 'act' shortcuts

  }
}

