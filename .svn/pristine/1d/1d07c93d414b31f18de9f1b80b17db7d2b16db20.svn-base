using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NakedObjects.Audit;
using NakedObjects;
using KhelaGhar.AMS.Model.DbAccess;
using System.Security.Principal;
using KhelaGhar.AMS.Model.Domain;

namespace KhelaGhar.AMS.Model.KhelaGharAMSAudit
{
    public class KhelaGharAMSAuditor : IAuditor
    {
        #region Injected Services
        // This region should contain properties to hold references to any services required by the
        // object.  Use the 'injs' shortcut to add a new service; 'injc' to add an injected Container
        public IDomainObjectContainer Container { set; protected get; }
        #endregion

        KhelaGharAMSAuditContext context = new KhelaGharAMSAuditContext();

        public void ActionInvoked(IPrincipal byPrincipal, string actionName, string serviceName, bool queryOnly, object[] withParameters)
        {
            //throw new NotImplementedException();
        }

        public void ActionInvoked(IPrincipal byPrincipal, string actionName, object onObject, bool queryOnly, object[] withParameters)
        {
            //throw new NotImplementedException();
        }

        public void ObjectPersisted(IPrincipal byPrincipal, object updatedObject)
        {
            if (updatedObject is Area)
            {
              var actionType = (int)(AllEnums.ActionTypes.Insert);
              ObjectPersistUpdateForArea(byPrincipal, updatedObject, actionType);
            }

            if (updatedObject is Asar)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForAsar(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is AsarActivity)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForAsarActivity(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is Committee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForCommittee(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is CommitteeMember)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForCommitteeMember(byPrincipal, updatedObject, actionType);
            }
            
            if (updatedObject is AsarCommittee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForAsarCommittee(byPrincipal, updatedObject, actionType);
            }
            
            if (updatedObject is CentralCommittee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Insert);
                ObjectPersistUpdateForCentralCommittee(byPrincipal, updatedObject, actionType);
            }
        }

        public void ObjectUpdated(IPrincipal byPrincipal, object updatedObject)
        {
            if (updatedObject is Area)
            {
              var actionType = (int)(AllEnums.ActionTypes.Update);
              ObjectPersistUpdateForArea(byPrincipal, updatedObject, actionType);
            }

            if (updatedObject is Asar)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForAsar(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is AsarActivity)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForAsarActivity(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is Committee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForCommittee(byPrincipal, updatedObject, actionType);
            }
            if (updatedObject is CommitteeMember)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForCommitteeMember(byPrincipal, updatedObject, actionType);
            }
           
            if (updatedObject is AsarCommittee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForAsarCommittee(byPrincipal, updatedObject, actionType);
            }
            
            if (updatedObject is CentralCommittee)
            {
                var actionType = (int)(AllEnums.ActionTypes.Update);
                ObjectPersistUpdateForCentralCommittee(byPrincipal, updatedObject, actionType);
            }
        }

        private void ObjectPersistUpdateForArea(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
          Area area = (Area)updatedObject;

          var objectId = string.Format("{0}", area.AreaId);
          
          var auditor = Container.NewTransientInstance<AreaAudit>();

          auditor.Name = area.Name;
          auditor.Description = area.Description;
          if (area.Parent != null)
          {
            auditor.ParentID = area.Parent.AreaId;
          }
          auditor.AreaTypeID = area.AreaType.AreaTypeId;

          auditor.User = byPrincipal.Identity.Name;
          auditor.Date = DateTime.Now;
          auditor.ActionType = actionType;
          auditor.DomainID = objectId;

          Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForAsar(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            Asar asar = (Asar) updatedObject;

            var objectId = string.Format("{0}", asar.Id);

            var auditor = Container.NewTransientInstance<AsarAudit>();

            auditor.Name = asar.Name;
            if (asar.DateOfEstablishment != null)
            {
                auditor.DateOfEstablishment = (DateTime)asar.DateOfEstablishment;
            }
            auditor.TotalMembers = asar.TotalMembers;
            auditor.AddressLine = asar.AddressLine;
            auditor.AreaId = asar.Area.AreaId;
            
            auditor.AsarStatus = (int)asar.AsarStatus;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForAsarActivity(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            AsarActivity activity = (AsarActivity)updatedObject;

            var objectId = string.Format("{0}", activity.AsarActivityId);

            var auditor = Container.NewTransientInstance<AsarActivityAudit>();

            auditor.AsarId = activity.Asar.Id;
            auditor.ActivityId = activity.Activity.ActivityId;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForCommittee(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            Committee com = (Committee)updatedObject;

            var objectId = string.Format("{0}", com.CommitteeId);

            var auditor = Container.NewTransientInstance<CommitteeAudit>();

            auditor.CommitteeType = com.CommitteeType;
            auditor.TotalMembers = com.TotalMembers;
            auditor.DateOfFormation = com.DateOfFormation;
            //auditor.AsarId = com.Asar.Id;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForCommitteeMember(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            CommitteeMember member = (CommitteeMember)updatedObject;

            var objectId = string.Format("{0}", member.CommitteeMemberId);

            var auditor = Container.NewTransientInstance<CommitteeMemberAudit>();

            auditor.KormiId = member.Kormi.KormiId;
            auditor.DesignationId = member.Designation.DesignationId;
            auditor.CommitteeId = member.Committee.CommitteeId;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForAsarCommittee(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            AsarCommittee asarcom = (AsarCommittee)updatedObject;

            var objectId = string.Format("{0}", asarcom.AsarCommitteeId);

            var auditor = Container.NewTransientInstance<AsarCommitteeAudit>();

            auditor.CommitteeId = asarcom.Committee.CommitteeId;
            auditor.AsarId = asarcom.Asar.Id;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }

        private void ObjectPersistUpdateForCentralCommittee(IPrincipal byPrincipal, object updatedObject, int actionType)
        {
            CentralCommittee cc = (CentralCommittee)updatedObject;

            var objectId = string.Format("{0}", cc.CentralCommitteeId);

            var auditor = Container.NewTransientInstance<CentralCommitteeAudit>();

            auditor.CommitteeId = cc.Committee.CommitteeId;
            auditor.CentralKhelaGharId = cc.CentralKhelaGhar.CentralKhelaGharId;

            auditor.User = byPrincipal.Identity.Name;
            auditor.Date = DateTime.Now;
            auditor.ActionType = actionType;
            auditor.DomainID = objectId;

            Container.Persist(ref auditor);
        }
    }
}
