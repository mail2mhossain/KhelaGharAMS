using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using NakedObjects;
using System.ComponentModel;

namespace KhelaGhar.AMS.Model.Domain
{
    [DisplayName("কর্মী")]
    public class Kormi
    {
        #region Injected Services
        // This region should contain properties to hold references to any services required by the
        // object.  Use the 'injs' shortcut to add a new service; 'injc' to add an injected Container
        public IDomainObjectContainer Container { set; protected get; }
        #endregion

        #region Life Cycle Methods
        // This region should contain any of the 'life cycle' convention methods (such as
        // Created(), Persisted() etc) called by the framework at specified stages in the lifecycle.

        public virtual void Persisting()
        {
          AuditFields.InsertedBy = Container.Principal.Identity.Name;
          AuditFields.InsertedDateTime = DateTime.Now;
          AuditFields.LastUpdatedBy = Container.Principal.Identity.Name;
          AuditFields.LastUpdatedDateTime = DateTime.Now;
        }
        public virtual void Updating()
        {
          AuditFields.LastUpdatedBy = Container.Principal.Identity.Name;
          AuditFields.LastUpdatedDateTime = DateTime.Now;
        }
        #endregion

        #region Primitive Properties
        [Key, NakedObjectsIgnore]
        public virtual int KormiId { get; set; }

        [MemberOrder(10), Title]
        [DisplayName("নাম")]
        [MaxLength(250), Required]
        public virtual string Name { get; set; }

        [MemberOrder(20)]
        [DisplayName("মোবাইল নং")]
        [MaxLength(25), Required]
        public virtual string MobileNo { get; set; }

        [MemberOrder(30)]
        [DisplayName("ইমেইল"), Optionally]
        [RegEx(Validation = @"^[\-\w\.]+@[\-\w\.]+\.[A-Za-z]+$", Message = "Not a valid email address")]
        public virtual string Email { get; set; }

        [MemberOrder(40), MultiLine(NumberOfLines = 3, Width = 50), Optionally]
        [DisplayName("ঠিকানা")]
        [MaxLength(350)]
        public virtual string AddressLine { get; set; }

        [DisplayName("কর্মীর অবস্থা"), MemberOrder(60), Required]
        [EnumDataType(typeof(AllEnums.KormiStatus))]
        [DefaultValue(AllEnums.KormiStatus.সক্রিয়)]
        public virtual int Status { get; set; }
      
        #endregion

        #region Complex Properties
        #region AuditFields (AuditFields)

        private AuditFields _auditFields = new AuditFields();

        [MemberOrder(250)]
        [NakedObjectsIgnore, Required]
        public virtual AuditFields AuditFields
        {
          get
          {
            return _auditFields;
          }
          set
          {
            _auditFields = value;
          }
        }

        #endregion

        #endregion

        #region Navigation Properties

        [MemberOrder(80)]
        [DisplayName("আসর"), Optionally]
        public virtual Asar Asar { get; set; }

        [MemberOrder(50), Optionally]
        [DisplayName("এলাকা")]
        public virtual Area Area { get; set; }

        [PageSize(10)]
        public IQueryable<Area> AutoCompleteArea([MinLength(3)] string matching)
        {
          IQueryable<Area> areas = (from a in Container.Instances<Area>()
                                    where a.Name.StartsWith(matching)
                                    && (a.AreaType.AreaTypeId == (int)AllEnums.AreaType.SubDistrict ||
                                    a.AreaType.AreaTypeId == (int)AllEnums.AreaType.City ||
                                    a.AreaType.AreaTypeId == (int)AllEnums.AreaType.Thana ||
                                    a.AreaType.AreaTypeId == (int)AllEnums.AreaType.Village ||
                                    a.AreaType.AreaTypeId == (int)AllEnums.AreaType.Union ||
                                    a.AreaType.AreaTypeId == (int)AllEnums.AreaType.Ward)
                                    select a);
          return areas;
        }

        //Add properties with 'propv', collections with 'coll', actions with 'act' shortcuts
        #endregion

        #region Validations
        public string ValidateMobileNo(string mobileNo)
        {
            var rb = new ReasonBuilder();

            Kormi kormi = (from obj in Container.Instances<Kormi>()
                         where obj.MobileNo == mobileNo
                         select obj).FirstOrDefault();

            if (kormi != null)
            {
                if (this.KormiId != kormi.KormiId)
                {
                    rb.AppendOnCondition(true, "Duplicate Kormi");
                }
            }
            return rb.Reason;
        }
        #endregion
      //Add properties with 'propv', collections with 'coll', actions with 'act' shortcuts

    }
}

